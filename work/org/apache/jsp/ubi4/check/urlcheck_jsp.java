/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.46
 * Generated at: 2019-09-20 08:09:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ubi4.check;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.*;
import java.io.*;

public final class urlcheck_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String NL = System.getProperty("line.separator");

	String sReqType = request.getParameter("req_type");
	String sUrl = request.getParameter("url");

	if( sReqType == null || sReqType.equalsIgnoreCase("null") ) {

		sReqType = "GET";
	}
	if( sUrl == null || sUrl.equalsIgnoreCase("null") ) {

		sUrl = "";
	}
	
	StringBuffer contents = new StringBuffer();
	
	if( !sUrl.equals("") ) {

		try {
			
			URL url = new URL(sUrl);
			contents.append(">> URL(" + sUrl + ") Connecting...").append(NL);
			HttpURLConnection uc = (HttpURLConnection)url.openConnection();

			uc.setDoOutput(true);
			uc.setDoInput(true);
			uc.setUseCaches(false);
			uc.setRequestMethod(sReqType);

			StringBuffer sb = new StringBuffer();

			InputStream is = uc.getInputStream();
			contents.append(">> Reading Contents...").append(NL);
			
			BufferedReader in = new BufferedReader(new InputStreamReader(is));

			int buffSize = 1024 * 8;
			char[] buff;
			int insize = 0;
			while ((insize = in.read(buff = new char[buffSize], 0, buffSize)) != -1) {
				
				sb.append((new String(buff, 0, insize)));
			}
			String receivestr = sb.toString().trim();
			
			contents.append(">> Contents").append(NL);
			contents.append("------------------------------------------").append(NL);
			contents.append(sb.toString().trim()).append(NL);
			contents.append("------------------------------------------").append(NL);
			contents.append(">> End").append(NL);
		}
		catch(FileNotFoundException fnfe){
			
			contents.append(">> FileNotFoundException").append(NL);
			contents.append("------------------------------------------").append(NL);
			contents.append(fnfe.getMessage()).append(NL);
			contents.append("------------------------------------------").append(NL);
			contents.append(">> End").append(NL);
			fnfe.printStackTrace();
		}		
		catch(Exception e){
			
			contents.append(">> Exception").append(NL);
			contents.append("------------------------------------------").append(NL);
			contents.append(e.getMessage()).append(NL);
			contents.append("------------------------------------------").append(NL);
			contents.append(">> End").append(NL);
			e.printStackTrace();
		}		
	}
		

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n");
      out.write("<title>URL 확인</title>\r\n");
      out.write("<style>\r\n");
      out.write("\tbody  { font-family:sans-serif, arial; font-size:9pt; }\r\n");
      out.write("\ttable { font-family:sans-serif, arial; font-size:9pt; }\r\n");
      out.write("</style>\r\n");
      out.write("<script language=\"JavaScript\">\r\n");
      out.write("<!--\r\n");
      out.write("\tfunction checkURL() {\r\n");
      out.write("\r\n");
      out.write("\t\tif(document.urlcheck.url.value == \"\") {\r\n");
      out.write("\r\n");
      out.write("\t\t\talert(\"Please Input URL(ex : http://localhost:8080/UbiData)\");\r\n");
      out.write("\t\t\tdocument.urlcheck.url.focus();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse document.urlcheck.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("//-->\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"margin:10\">\r\n");
      out.write("\t<h2>Check URL<h2>\r\n");
      out.write("\t<form name='urlcheck' method='post' action='./urlcheck.jsp'>\r\n");
      out.write("\t\t<table width=\"585\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" bordercolor=\"#808080\" bordercolorlight=\"#C0C0C0\" bordercolordark=\"#F6F6F6\">\r\n");
      out.write("\t\t\t<tr height=\"20\">\r\n");
      out.write("\t\t\t\t<td align=\"center\" bgcolor=\"#C0C0C0\" width=\"100\" style='padding:3px'>REQ TYPE</td>\r\n");
      out.write("\t\t\t\t<td align=\"left\" style='padding:3px; padding-left:6px;'' >\r\n");
      out.write("\t\t\t\t\t<select name=\"req_type\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"GET\" ");
      out.print( sReqType.equals("GET")?"selected":"" );
      out.write(">GET</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"POST\" ");
      out.print( sReqType.equals("POST")?"selected":"" );
      out.write(">POST</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr height=\"20\">\r\n");
      out.write("\t\t\t\t<td align=\"center\" bgcolor=\"#C0C0C0\" width=\"100\" style='padding:3px'>URL</td>\r\n");
      out.write("\t\t\t\t<td align=\"center\" style='padding:3px'>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"url\" size=\"70\" value=\"");
      out.print( sUrl );
      out.write("\">\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<table width=\"585\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" bordercolor=\"#808080\" bordercolorlight=\"#C0C0C0\" bordercolordark=\"#F6F6F6\">\r\n");
      out.write("\t\t\t<tr height=\"30\">\r\n");
      out.write("\t\t\t\t<td align=\"center\">\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" value=\"URL CHECK\" onclick=\"checkURL()\">\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("\tResult<br>\r\n");
      out.write("\t<textarea name=\"sql\" rows=\"20\" cols=\"84\">");
      out.print( contents.toString() );
      out.write("</textarea>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
